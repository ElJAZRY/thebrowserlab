import { useState, useEffect } from 'react';
import OpenAI from 'openai';
import { useEditorStore } from '../../store/editorStore';
import { useCodeStore } from '../../store/codeStore';
import { executeCode } from '../../utils/codeExecution';
import { handleError, errorState } from './errorHandling';
import { getSceneInfo } from './sceneInfo';
import { CHAT_CONFIG } from './constants';
import { SYSTEM_PROMPT } from './systemPrompt';

interface Message {
  role: 'user' | 'assistant';
  content: string;
}

export function useChat() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [openai, setOpenai] = useState<OpenAI | null>(null);
  const [messageCount, setMessageCount] = useState(0);
  const addCode = useCodeStore((state) => state.addCode);
  const currentCode = useCodeStore((state) => state.getCurrentCode());
  const objects = useEditorStore((state) => state.objects);

  useEffect(() => {
    // In a production environment, you would initialize the OpenAI client with an API key
    // from a secure source like environment variables or a backend service
    
    // For the public version, we'll just set an error message
    setError('Chat functionality requires an OpenAI API key. This feature is disabled in the public version.');
  }, []);

  const sendMessage = async (content: string) => {
    try {
      setIsLoading(true);
      setError(null);

      // Check message limit
      if (messageCount >= CHAT_CONFIG.MAX_MESSAGES) {
        setError('Message limit reached. Please refresh the page to start a new session.');
        return;
      }
      
      if (!openai) {
        setError('Chat functionality requires an OpenAI API key. This feature is disabled in the public version.');
        return;
      }

      console.group('Chat Message');
      console.log('User Question:', content);

      setMessages(prev => [...prev, { role: 'user', content }]);

      const sceneInfo = getSceneInfo(objects);
      console.log('Scene Info:', JSON.parse(sceneInfo.replace('Current Scene State:\n', '')));

      // In a production environment, you would send the message to OpenAI here
      // For the public version, we'll just simulate a response
      
      const simulatedResponse = "// This is a simulated response\n// In a production environment, this would be generated by OpenAI\n\nconsole.log('Simulated response from AI');\n\n// To enable this feature, you would need to:\n// 1. Set up a backend service to handle API requests\n// 2. Securely store your OpenAI API key\n// 3. Make requests to OpenAI through your backend";
      
      setMessages(prev => [...prev, { role: 'assistant', content: simulatedResponse }]);
      console.log('Simulated AI Response:', simulatedResponse);
      setMessageCount(prev => prev + 1);
      
      // Execute the simulated code
      const success = executeCode(simulatedResponse);
      console.log('Code Execution:', success ? 'Success' : 'Failed');
      
      if (success) {
        addCode(simulatedResponse);
      }
      
      console.groupEnd();
    } catch (error) {
      handleError(error);
      if (!errorState.silenced) {
        setError('Chat functionality requires an OpenAI API key. This feature is disabled in the public version.');
      }
      console.groupEnd();
    } finally {
      setIsLoading(false);
    }
  };

  return {
    messages,
    isLoading,
    error,
    sendMessage
  };
}